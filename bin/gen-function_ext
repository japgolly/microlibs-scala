#!/bin/env scala
// vim: set ft=scala :

val comma = ", "
def T(i: Int) = (64+i).toChar.toString

var boo = Seq.empty[String]

def mergeFn(name: String, i: String, is: String, o: String, op: String) =
  s"  @inline def $name(y: $i=>$o): $i=>$o = ($is) => x($is) $op y($is)"
def and(i: String, is: String) = mergeFn("&&", i, is, "Boolean", "&&")
def or (i: String, is: String) = mergeFn("||", i, is, "Boolean", "||")

for (i <- (1 to 22)) {
  // def m (f: Int => String): List[String] = (1 to a).toList.map(f)
  // def mc(f: Int => String): String = m(f).mkString(comma)
  // def mt(f: Int => String): String = m(f).mkString("(",comma,")")

  def A(j: Int) = ('A'+j).toChar.toString
  val As = (0 until i) map A
  val Ac = As mkString ","
  val ac = Ac.toLowerCase
  val _s = List.fill(i)("_") mkString ","

  boo :+= s"@inline final implicit class JSLE_Function${i}ToBool[$Ac](private val x: ($Ac) => Boolean) extends AnyVal {"
  boo :+= s"  @inline def unary_! : ($Ac) => Boolean = !x(${_s})"
  boo :+= and(s"($Ac)", ac)
  boo :+= or(s"($Ac)", ac)
  boo :+= "}"
}
// println((rt++ra) mkString "\n")
println(boo mkString "\n")
println()
